/*
   Sticks World axioms for use with abductive meta-interpreter
   Planning version - initial situation known, plan abducible
*/


/* Event calculus axioms */

axiom(holds(F,T2),
     [happens(A,T1), before(T1,T2),
     initiates(A,F,T1),
     not(clipped(T1,F,T2))]).

axiom(holds(F,T),[initially(F), not(clipped(0,F,T))]).

axiom(clipped(T1,F,T3),
     [happens(A,T2),
     terminates(A,F,T2),
     before(T1,T2), before(T2,T3)]).

/*
axiom(see(X),[holds(facing(Y),T1),holds(loc(X,Y),T1)]) :- write( 'Axiom see(x) general: ' ), write( [holds(facing(Y),T1),holds(loc(X,Y),T1)] ), nl, nl.

axiom(see(X),[happens(seek_left,T1),holds(facing(Y),T1),holds(next_left(Y2,Y),T1),holds(loc(X,Y2),T1)]) :-
	write('Axiom see(x), seek_left'), nl, nl.

axiom(see(X),[happens(seek_right,T1),holds(facing(Y),T1),holds(next_left(Y,Y2),T1),holds(loc(X,Y2),T1)]) :-
	write('Axiom see(x), seek_right'), nl, nl.

axiom(initialise(F),[holds(F,T1)]) :-
	write('Initialise(F)'), nl, nl.

*/
/* Fluents examples */
/*
got(X) - means the same as beforehand - the robot has object X in its gripper

at(X) - means the robot is at location X

loc(X,Y) - means object X is at location Y

facing(X) - means the robot is facing location X (note: not object X)
*/


/* Effect axioms */

axiom(initiates(see(X),knowcol(X),T),[holds(loc(X,Y),T)]).

/*
axiom(initiates(initialise(see(X)),loc(X,Y),T),[holds(facing(Y),T)]) :- write( '>> initialiiiiiiiisa' ), nl, nl.
*/

axiom(initiates(initialise(F),holds(F,T),T)) :- write( 'init: ' ), write( [F, T] ), nl, nl.

axiom(initiates(approach,at(X),T),[holds(facing(X),T)]).

axiom(initiates(seek_left,loc(X,Y),T),[initialise(see(X)),holds(facing(Y),T)]) :- write( '>> spoo ' ), write( [see(X),holds(facing(Y),T)] ), nl, nl.
axiom(initiates(seek_left,facing(X),T),[holds(facing(Y),T),next_left(X,Y)]).

axiom(initiates(seek_right,facing(X),T),[holds(facing(Y),T),next_left(Y,X)]).

axiom(initiates(pickup,got(X),T),[holds(loc(X,Y),T),holds(at(Y),T)]).

axiom(initiates(putdown,loc(X,Y),T),[holds(at(Y),T),holds(got(X),T)]).

axiom(terminates(approach,at(Y),T),[]).

axiom(terminates(seek_left,facing(Y),T),[]).

axiom(terminates(seek_right,facing(Y),T),[]).

axiom(terminates(pickup,loc(X,Y),T),[holds(at(Y),T)]).

axiom(terminates(putdown,got(X),T),[]).

/* Old effect axioms */
/*
axiom(initiates(forwards,at_edge,T),[]).

axiom(initiates(approach,in_front(X),T),[holds(visible(X),T)]).

axiom(initiates(seek_left,visible(X),T),
     [holds(visible(Y),T),next_left(X,Y)]).

axiom(initiates(seek_right,visible(X),T),
     [holds(visible(Y),T),next_left(Y,X)]).

axiom(initiates(pickup,got(X),T),[holds(in_front(X),T)]).

axiom(initiates(putdown,tidy(X),T),[holds(got(X),T),holds(at_edge,T)]).

axiom(terminates(forwards,in_front(X),T),[]).

axiom(terminates(approach,at_edge,T),[]).

axiom(terminates(seek_right,visible(X),T),[]).

axiom(terminates(seek_left,visible(X),T),[]).

axiom(terminates(pickup,visible(X),T),[]).

axiom(terminates(pickup,in_front(X),T),[]).

axiom(terminates(putdown,got(X),T),[]).
*/

/* Initial situation */

axiom(next_left(a,b),[]).

axiom(next_left(b,c),[]).

axiom(next_left(c,a),[]).

axiom(initially(facing(b)),[]).

/*
axiom(initially(loc(blue,a)),[]).

axiom(initially(loc(green,b)),[]).

axiom(initially(loc(red,c)),[]).
*/

/* Old initial situation */
/*
axiom(next_left(blue,green),[]).

axiom(next_left(green,red),[]).

axiom(next_left(red,blue),[]).

axiom(initially(visible(green)),[]).
*/

axiom(eq(X,X),[]).


/* Abduction policy */

abducible(_, happens(A,T)) :- skolemise(T).
abducible(_, before(T1,T2)) :-
     skolemise(T1), skolemise(T2).

abducible(_, initialise(F)) :- write( '>> abduce initialise' ), nl, nl.
/*abducible(_, see(F)) :- write( '>> abduce see' ), nl, nl.
*/

/*
   Sample queries:
   abdemo([holds(visible(blue),T)],[],R,[],N).
   abdemo([holds(in_front(blue),T)],[],R,[],N).
   abdemo([holds(tidy(blue),T)],[],R,[],N).
*/

