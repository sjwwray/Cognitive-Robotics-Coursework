/* Event calculus axioms */

axiom(holds(F,T2),
	[happens(A,T1), before(T1,T2), initiates(A,F,T1), not(clipped(T1,F,T2))]).

axiom(holds(F,T),
	[initially(F), not(clipped(0,F,T))]).

axiom(clipped(T1,F,T3),
	[happens(A,T2), terminates(A,F,T2), before(T1,T2), before(T2,T3)]).


/* Sensor events */

axiom(happens(see(X),T1),
	[happens(seek_left,T1), holds(facing(Y),T2), before(T1,T2), happens(initialise(loc(X,Y)),T2)]) :- write( [seek_left, X, Y, T1, T2] ), nl.

axiom(happens(see(X),T),
	[happens(seek_right,T), holds(facing(Y),T), initiates(seek_right,loc(X,Y),T)]).

axiom(happens(nothing,T),
	[happens(approach,T)]).

axiom(happens(nothing,T),
        [happens(pickup,T)]).

axiom(happens(nothing,T),
        [happens(putdown,T)]).


/* Effect axioms */

/*
axiom(initiates(initiates,F,T),[]).
*/

axiom(initiates(initialise(loc(X,Y)),loc(X,Y),T),[]) :- write( [loc(X,Y)] ), nl.

axiom(initiates(seek_left,knowcol(Y),T),[holds(loc(X,Y),T),holds(facing(Y),T)]).

axiom(initiates(seek_right,knowcol(Y),T),[holds(loc(X,Y),T),holds(facing(Y),T)]).

axiom(initiates(approach,at(X),T),[holds(facing(X),T)]).

axiom(initiates(seek_left,facing(X),T),[holds(facing(Y),T),next_left(X,Y)]).

axiom(initiates(seek_right,facing(X),T),[holds(facing(Y),T),next_left(Y,X)]).

axiom(initiates(pickup,got(X),T),[holds(loc(X,Y),T),holds(at(Y),T)]).

axiom(initiates(putdown,loc(X,Y),T),[holds(at(Y),T),holds(got(X),T)]).

axiom(terminates(approach,at(Y),T),[]).

axiom(terminates(seek_left,facing(Y),T),[]).

axiom(terminates(seek_right,facing(Y),T),[]).

axiom(terminates(pickup,loc(X,Y),T),[holds(at(Y),T)]).

axiom(terminates(putdown,got(X),T),[]).


/* Initial situation */

axiom(next_left(a,b),[]).

axiom(next_left(b,c),[]).

axiom(next_left(c,a),[]).

axiom(initially(facing(b)),[]).

/*
axiom(initially(loc(blue,a)),[]).
 
axiom(initially(loc(green,b)),[]).

axiom(initially(loc(red,c)),[]).
*/

axiom(eq(X,X),[]).


/* Abduction policy */

abducible(_,happens(A,T)) :-
	skolemise(T).

abducible(_,before(T1,T2)) :-
	skolemise(T1), skolemise(T2).


/* Abduction policy for perception */

/*
abducible(_,happens(see(X),T)) :-
	skolemise(T).
*/

abducible(_,initialise).
abducible(_,holds(loc(X,Y),T)) :- skolemise(T).

