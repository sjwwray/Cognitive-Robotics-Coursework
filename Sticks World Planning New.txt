/*
   Sticks World axioms for use with abductive meta-interpreter
   Planning version - initial situation known, plan abducible
*/


/* Event calculus axioms */

axiom(holds(F,T2),
     [happens(A,T1), before(T1,T2),
     initiates(A,F,T1),
     not(clipped(T1,F,T2))]).

axiom(holds(F,T),[initially(F), not(clipped(0,F,T))]).

axiom(clipped(T1,F,T3),
     [happens(A,T2),
     terminates(A,F,T2),
     before(T1,T2), before(T2,T3)]).

axiom(happens(see(X),T1),
	[happens(seek_left,T1),holds(facing(Y),T1),
	holds(facing(Z),T2),holds(next_left(Z,Y),T2),
	before(T1,T2)]).

axiom(happens(see(X),T1),
	[happens(seek_right,T1),holds(facing(Y),T1),
	holds(facing(Z),T2),holds(next_left(Y,Z),T1),
	before(T1,T2)]).


/* Effect axioms */

axiom(initiates(seek_left,knowcol(X),T),[holds(loc(X,Y),T)]).

axiom(initiates(seek_right,knowcol(X),T),[holds(loc(X,Y),T)]).

axiom(initiates(see(X),loc(X,Y),T2),[holds(facing(Y),T2),happens(seek_left,T1),before(T1,T2)]).

axiom(initiates(see(X),loc(X,Y),T2),[holds(facing(Y),T2),happens(seek_right,T1),before(T1,T2)]).

axiom(initiates(approach,at(X),T),[holds(facing(X),T)]).

axiom(initiates(seek_left,facing(X),T),[holds(facing(Y),T),next_left(X,Y)]).

axiom(initiates(seek_right,facing(X),T),[holds(facing(Y),T),next_left(Y,X)]).

axiom(initiates(pickup,got(X),T),[holds(loc(X,Y),T),holds(at(Y),T)]).

axiom(initiates(putdown,loc(X,Y),T),[holds(at(Y),T),holds(got(X),T)]).

axiom(terminates(approach,at(Y),T),[]).

axiom(terminates(seek_left,facing(Y),T),[]).

axiom(terminates(seek_right,facing(Y),T),[]).

axiom(terminates(pickup,loc(X,Y),T),[holds(at(Y),T)]).

axiom(terminates(putdown,got(X),T),[]).


/* Initial situation */

axiom(next_left(a,b),[]).

axiom(next_left(b,c),[]).

axiom(next_left(c,a),[]).

axiom(initially(facing(b)),[]).

/*
axiom(initially(loc(blue,a)),[]).
 
axiom(initially(loc(green,b)),[]).

axiom(initially(loc(red,c)),[]).
*/

axiom(eq(X,X),[]).


/* Abduction policy */

/*
abducible(_,happens(initialise(see(X)),T)) :-
	abducible(_,happens(seek_left,T)).
*/

abducible(_,happens(A,T)) :-
	skolemise(T).

abducible(_,before(T1,T2)) :-
	skolemise(T1), skolemise(T2).
